// main.dart
import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_gauges/gauges.dart';
import 'package:shared_preferences/shared_preferences.dart'; // RE-ADDED
import 'package:fl_chart/fl_chart.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:collection'; // For LinkedList
import 'dart:convert'; // For jsonDecode
import 'dart:io';


// --- Configuration ---
const String defaultRaspberryPiIpAddress = "192.168.43.144"; // Default IP
const int flaskServerPort = 5000;

// API Endpoints
const String apiDataEndpoint = "/api/data";
const String apiControlPump2Endpoint = "/api/control/pump2";

const String prefKeyRaspberryPiIp = "raspberry_pi_ip"; // Key for SharedPreferences
const int maxDataPoints = 300;
const Duration dataPollingInterval = Duration(seconds: 2);

// Data class for trend points
final class DataPoint extends LinkedListEntry<DataPoint> {
  final DateTime time;
  final double value;
  DataPoint(this.time, this.value);

  @override
  String toString() {
    return 'DataPoint(time: $time, value: $value)';
  }
}

enum TrendTimeRange { lastMinute, last5Minutes, last15Minutes, all }

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smart Water SCADA (Flask)',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        useMaterial3: true,
      ),
      home: const ScadaHomePage(),
    );
  }
}

// Settings Page RE-ADDED
class SettingsPage extends StatefulWidget {
  const SettingsPage({super.key});

  @override
  State<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends State<SettingsPage> {
  final _ipAddressController = TextEditingController();
  String _currentSavedIpAddress = defaultRaspberryPiIpAddress;

  @override
  void initState() {
    super.initState();
    _loadIpAddress();
  }

  Future<void> _loadIpAddress() async {
    final prefs = await SharedPreferences.getInstance();
    if (!mounted) return;
    setState(() {
      _currentSavedIpAddress = prefs.getString(prefKeyRaspberryPiIp) ?? defaultRaspberryPiIpAddress;
      _ipAddressController.text = _currentSavedIpAddress;
    });
  }

  Future<void> _saveIpAddress() async {
    final prefs = await SharedPreferences.getInstance();
    final newIp = _ipAddressController.text.trim();
    bool ipActuallyChanged = newIp != _currentSavedIpAddress;

    if (newIp.isNotEmpty) {
      // Basic IP format validation (optional, can be more robust)
      RegExp ipRegex = RegExp(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$");
      if (!ipRegex.hasMatch(newIp)) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Invalid IP Address format.')),
          );
        }
        return;
      }

      await prefs.setString(prefKeyRaspberryPiIp, newIp);
      if (!mounted) return;
      setState(() {
        _currentSavedIpAddress = newIp;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('IP Address saved: $newIp. Pull to refresh on main page to apply.')),
      );
      // Pass back true if the IP was actually changed, so the main page knows to refresh
      Navigator.pop(context, ipActuallyChanged);
    } else {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('IP Address cannot be empty.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Settings'),
        backgroundColor: Theme.of(context).colorScheme.primaryContainer,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text(
              'Flask Server IP Address (Raspberry Pi):',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _ipAddressController,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                hintText: 'e.g., 192.168.43.144',
              ),
              keyboardType: TextInputType.text, // Using .text for flexibility with dots
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _saveIpAddress,
              child: const Text('Save IP Address'),
            ),
            const SizedBox(height: 20),
            Text('Current saved IP: $_currentSavedIpAddress'),
            const SizedBox(height: 10),
            const Text(
              'Note: After saving, use the "Pull to Refresh" on the main page for the new IP address to take effect for the API connection.',
              style: TextStyle(fontSize: 12, fontStyle: FontStyle.italic),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _ipAddressController.dispose();
    super.dispose();
  }
}


// Trend Charts Page
class TrendChartsPage extends StatefulWidget {
  final LinkedList<DataPoint> waterLevelHistory;
  final LinkedList<DataPoint> pressureHistory;
  final LinkedList<DataPoint> flowRateHistory;

  const TrendChartsPage({
    super.key,
    required this.waterLevelHistory,
    required this.pressureHistory,
    required this.flowRateHistory,
  });

  @override
  State<TrendChartsPage> createState() => _TrendChartsPageState();
}

class _TrendChartsPageState extends State<TrendChartsPage> {
  TrendTimeRange _selectedTimeRange = TrendTimeRange.last5Minutes;

  LineChartData _createChartData(LinkedList<DataPoint> fullHistory, String title, Color lineColor, double minY, double maxY) {
    final now = DateTime.now();
    DateTime startTime;

    switch (_selectedTimeRange) {
      case TrendTimeRange.lastMinute:
        startTime = now.subtract(const Duration(minutes: 1));
        break;
      case TrendTimeRange.last5Minutes:
        startTime = now.subtract(const Duration(minutes: 5));
        break;
      case TrendTimeRange.last15Minutes:
        startTime = now.subtract(const Duration(minutes: 15));
        break;
      case TrendTimeRange.all:
        startTime = DateTime.fromMillisecondsSinceEpoch(0);
        break;
    }

    List<DataPoint> filteredHistory = fullHistory.where((dp) => dp.time.isAfter(startTime)).toList();

    if (filteredHistory.isEmpty && fullHistory.isNotEmpty) {
      filteredHistory.add(fullHistory.last);
    }

    List<FlSpot> spots = filteredHistory.map((dp) {
      return FlSpot(dp.time.millisecondsSinceEpoch.toDouble(), dp.value);
    }).toList();

    double minXValue = now.subtract(const Duration(minutes: 5)).millisecondsSinceEpoch.toDouble();
    double maxXValue = now.millisecondsSinceEpoch.toDouble();

    if (spots.isNotEmpty) {
      minXValue = spots.first.x;
      maxXValue = spots.last.x;
      if (spots.length == 1) {
        minXValue = spots.first.x - const Duration(seconds: 30).inMilliseconds.toDouble();
        maxXValue = spots.first.x + const Duration(seconds: 30).inMilliseconds.toDouble();
      }
    } else {
      spots.add(FlSpot(maxXValue, minY));
    }

    if (minXValue >= maxXValue && spots.length == 1) {
      minXValue = maxXValue - const Duration(minutes: 1).inMilliseconds.toDouble();
    }

    return LineChartData(
      minY: minY,
      maxY: maxY,
      minX: minXValue,
      maxX: maxXValue,
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          color: lineColor,
          barWidth: 2,
          isStrokeCapRound: true,
          dotData: const FlDotData(show: false),
          belowBarData: BarAreaData(show: true, color: lineColor.withOpacity(0.2)),
        ),
      ],
      titlesData: FlTitlesData(
        bottomTitles: AxisTitles(
          sideTitles: SideTitles(
            showTitles: true,
            reservedSize: 30,
            getTitlesWidget: (value, meta) {
              final dateTime = DateTime.fromMillisecondsSinceEpoch(value.toInt());
              return SideTitleWidget(
                axisSide: meta.axisSide,
                space: 4,
                child: Text(
                  '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}:${dateTime.second.toString().padLeft(2, '0')}',
                  style: const TextStyle(fontSize: 10),
                ),
              );
            },
            interval: (spots.length > 1 && (maxXValue - minXValue) > 0) ? (maxXValue - minXValue).abs() / 4 : const Duration(seconds: 15).inMilliseconds.toDouble(),
          ),
        ),
        leftTitles: AxisTitles(
          sideTitles: SideTitles(
            showTitles: true,
            reservedSize: 40,
            getTitlesWidget: (value, meta) {
              return Text(value.toStringAsFixed(0), style: const TextStyle(fontSize: 10));
            },
            interval: (maxY - minY > 0) ? (maxY - minY) / 5 : 1,
          ),
        ),
        topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
        rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      ),
      gridData: const FlGridData(show: true),
      borderData: FlBorderData(show: true, border: Border.all(color: const Color(0xff37434d), width: 1)),
    );
  }

  Widget _buildTimeRangeSelector() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: SegmentedButton<TrendTimeRange>(
        segments: const <ButtonSegment<TrendTimeRange>>[
          ButtonSegment<TrendTimeRange>(value: TrendTimeRange.lastMinute, label: Text('1m'), tooltip: "Last 1 Minute"),
          ButtonSegment<TrendTimeRange>(value: TrendTimeRange.last5Minutes, label: Text('5m'), tooltip: "Last 5 Minutes"),
          ButtonSegment<TrendTimeRange>(value: TrendTimeRange.last15Minutes, label: Text('15m'), tooltip: "Last 15 Minutes"),
          ButtonSegment<TrendTimeRange>(value: TrendTimeRange.all, label: Text('All'), tooltip: "All Data"),
        ],
        selected: <TrendTimeRange>{_selectedTimeRange},
        onSelectionChanged: (Set<TrendTimeRange> newSelection) {
          if(mounted){
            setState(() {
              _selectedTimeRange = newSelection.first;
            });
          }
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Trend Charts'),
        backgroundColor: Theme.of(context).colorScheme.primaryContainer,
      ),
      body: ListView(
        padding: const EdgeInsets.all(8.0),
        children: <Widget>[
          _buildTimeRangeSelector(),
          const SizedBox(height: 10),
          Text("Water Level Trend (%)", style: Theme.of(context).textTheme.titleMedium, textAlign: TextAlign.center),
          SizedBox(
            height: 250,
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: widget.waterLevelHistory.isEmpty
                  ? const Center(child: Text("No data yet for Water Level"))
                  : LineChart(_createChartData(widget.waterLevelHistory, "Water Level", Colors.blue, 0, 100)),
            ),
          ),
          const SizedBox(height: 20),
          Text("Pressure Trend (PSI)", style: Theme.of(context).textTheme.titleMedium, textAlign: TextAlign.center),
          SizedBox(
            height: 250,
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: widget.pressureHistory.isEmpty
                  ? const Center(child: Text("No data yet for Pressure"))
                  : LineChart(_createChartData(widget.pressureHistory, "Pressure", Colors.red, 0, 35)),
            ),
          ),
          const SizedBox(height: 20),
          Text("Flow Rate Trend (LPM)", style: Theme.of(context).textTheme.titleMedium, textAlign: TextAlign.center),
          SizedBox(
            height: 250,
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: widget.flowRateHistory.isEmpty
                  ? const Center(child: Text("No data yet for Flow Rate"))
                  : LineChart(_createChartData(widget.flowRateHistory, "Flow Rate", Colors.green, 0, 30)),
            ),
          ),
        ],
      ),
    );
  }
}


class ScadaHomePage extends StatefulWidget {
  const ScadaHomePage({super.key});

  @override
  State<ScadaHomePage> createState() => _ScadaHomePageState();
}

class _ScadaHomePageState extends State<ScadaHomePage> {
  String _currentRaspberryPiIp = defaultRaspberryPiIpAddress;
  Timer? _dataPollingTimer;
  String _apiStatusMessage = "Initializing...";
  bool _isLoading = false;

  double waterLevel = 0.0;
  double pressure = 0.0;
  double flowRate = 0.0;
  bool pump1Status = false;
  bool pump2Status = false;
  bool valve1Status = false;
  bool valve2Status = false;
  String generalAlarm = "No alarms";
  bool isPump2OnUserIntent = false;

  final double maxPressureForGauge = 30.0;
  final double maxFlowRateForGauge = 25.0;

  final LinkedList<DataPoint> _waterLevelHistory = LinkedList<DataPoint>();
  final LinkedList<DataPoint> _pressureHistory = LinkedList<DataPoint>();
  final LinkedList<DataPoint> _flowRateHistory = LinkedList<DataPoint>();

  @override
  void initState() {
    super.initState();
    _loadIpAndStartPolling();
  }

  Future<void> _loadIpAndStartPolling() async {
    final prefs = await SharedPreferences.getInstance();
    if(!mounted) return;
    setState(() {
      _currentRaspberryPiIp = prefs.getString(prefKeyRaspberryPiIp) ?? defaultRaspberryPiIpAddress;
      _apiStatusMessage = "Connecting to: $_currentRaspberryPiIp";
    });
    _startDataPolling();
  }

  void _startDataPolling() {
    _dataPollingTimer?.cancel();
    _fetchData();
    _dataPollingTimer = Timer.periodic(dataPollingInterval, (timer) {
      _fetchData();
    });
  }

  Future<void> _fetchData() async {
    if (_isLoading) return;
    if(!mounted) return;
    setState(() {
      _isLoading = true;
    });

    final url = Uri.http('$_currentRaspberryPiIp:$flaskServerPort', apiDataEndpoint);
    try {
      final response = await http.get(url).timeout(const Duration(seconds: 5));
      if (!mounted) return;

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        setState(() {
          waterLevel = (data['water_level_percent'] as num?)?.toDouble() ?? 0.0;
          pressure = (data['pressure_psi'] as num?)?.toDouble() ?? 0.0;
          flowRate = (data['flow_rate_lpm'] as num?)?.toDouble() ?? 0.0;
          pump1Status = (data['pump1_status'] as int?) == 1;
          pump2Status = (data['pump2_status'] as int?) == 1;
          valve1Status = (data['valve1_status'] as int?) == 1;
          valve2Status = (data['valve2_status'] as int?) == 1;
          generalAlarm = data['general_alarm'] as String? ?? "No alarms";

          _addHistoryData(_waterLevelHistory, waterLevel);
          _addHistoryData(_pressureHistory, pressure);
          _addHistoryData(_flowRateHistory, flowRate);

          if (!pump2Status && isPump2OnUserIntent) {
            isPump2OnUserIntent = false;
          }
          _apiStatusMessage = "Connected to: $_currentRaspberryPiIp (Updated: ${TimeOfDay.now().format(context)})";
        });
      } else {
        print("Failed to fetch data: ${response.statusCode} ${response.reasonPhrase}");
        if(mounted) {
          setState(() {
            _apiStatusMessage = "API Error: ${response.statusCode} from $_currentRaspberryPiIp";
            generalAlarm = "API Connection Error";
          });
        }
      }
    } catch (e) {
      print("Error fetching data: $e");
      if(mounted) {
        setState(() {
          _apiStatusMessage = "Connection Error with $_currentRaspberryPiIp";
          generalAlarm = "Network Error: Cannot reach server.";
        });
      }
    } finally {
      if(mounted){
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _addHistoryData(LinkedList<DataPoint> historyList, double value) {
    historyList.add(DataPoint(DateTime.now(), value));
    if (historyList.length > maxDataPoints) {
      historyList.remove(historyList.first);
    }
  }

  Future<void> _sendCommand(String endpoint, Map<String, String> body) async {
    if (_isLoading) {
      if(mounted){
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please wait, previous operation in progress.')),
        );
      }
      return;
    }
    if(!mounted) return;
    setState(() { _isLoading = true; });

    final url = Uri.http('$_currentRaspberryPiIp:$flaskServerPort', endpoint);
    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode(body),
      ).timeout(const Duration(seconds: 5));

      if (!mounted) return;
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        print("Command successful: ${responseData['message']}");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(responseData['message'] ?? 'Command sent!')),
        );
        _fetchData();
      } else {
        print("Failed to send command: ${response.statusCode} ${response.reasonPhrase}");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Command failed: ${response.statusCode}')),
        );
      }
    } catch (e) {
      print("Error sending command: $e");
      if(mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error sending command: $e')),
        );
      }
    } finally {
      if(mounted) {
        setState(() { _isLoading = false; });
      }
    }
  }

  void _togglePump2AndValve2(bool value) {
    if (mounted) {
      setState(() {
        isPump2OnUserIntent = value;
      });
      final command = isPump2OnUserIntent ? "ON" : "OFF";
      _sendCommand(apiControlPump2Endpoint, {"state": command});
    }
  }


  @override
  void dispose() {
    _dataPollingTimer?.cancel();
    super.dispose();
  }

  Future<void> _forceRefreshDataAndConnection() async {
    _dataPollingTimer?.cancel();
    await _loadIpAndStartPolling();
  }


  Widget _buildRadialGauge(String title, double value, String unit, double maximumValue, List<GaugeRange> ranges) {
    return SizedBox(
      height: 220,
      child: SfRadialGauge(
        title: GaugeTitle(
          text: title,
          textStyle: const TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
        ),
        axes: <RadialAxis>[
          RadialAxis(
            minimum: 0,
            maximum: maximumValue,
            labelFormat: '{value} $unit',
            axisLabelStyle: const GaugeTextStyle(fontSize: 10),
            ranges: ranges,
            pointers: <GaugePointer>[
              NeedlePointer(
                  value: value,
                  enableAnimation: true,
                  animationType: AnimationType.ease,
                  needleColor: Colors.blueGrey,
                  knobStyle: const KnobStyle(color: Colors.blueGrey, sizeUnit: GaugeSizeUnit.logicalPixel, knobRadius: 10),
                  tailStyle: const TailStyle(color: Colors.blueGrey, length: 0.15, width: 5, lengthUnit: GaugeSizeUnit.factor)
              )
            ],
            annotations: <GaugeAnnotation>[
              GaugeAnnotation(
                widget: Text(
                  '${value.toStringAsFixed(1)} $unit',
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                angle: 90,
                positionFactor: 0.75,
              )
            ],
          )
        ],
      ),
    );
  }

  Widget _buildIconStatusCard(String title, bool isActive, IconData activeIcon, IconData inactiveIcon) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
      child: ListTile(
        leading: Icon(
          isActive ? activeIcon : inactiveIcon,
          color: isActive ? Colors.green.shade600 : Colors.red.shade600,
          size: 30,
        ),
        title: Text(title, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
        trailing: Text(
          isActive ? (title.contains("Valve") ? "OPEN" : "ON") : (title.contains("Valve") ? "CLOSED" : "OFF"),
          style: TextStyle(
              fontSize: 16,
              color: isActive ? Colors.green.shade700 : Colors.red.shade700,
              fontWeight: FontWeight.bold
          ),
        ),
      ),
    );
  }

  Widget _buildAlarmCard() {
    bool isAlarmActive = generalAlarm != "No alarms";
    return Card(
      elevation: 2,
      margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
      color: isAlarmActive ? Colors.orange.shade100 : Theme.of(context).cardColor,
      child: ListTile(
        leading: Icon(
          isAlarmActive ? Icons.warning_amber_rounded : Icons.check_circle_outline,
          color: isAlarmActive ? Colors.orange.shade900 : Colors.green.shade700,
          size: 30,
        ),
        title: Text("System Alarm", style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500, color: isAlarmActive ? Colors.orange.shade900 : null)),
        subtitle: Text(
          generalAlarm,
          style: TextStyle(
            fontSize: 14,
            color: isAlarmActive ? Colors.orange.shade900 : Colors.grey.shade700,
            fontWeight: isAlarmActive ? FontWeight.bold : FontWeight.normal,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    Color apiStatusColor;
    if (_apiStatusMessage.startsWith("Connected")) {
      apiStatusColor = Colors.green.shade700;
    } else if (_apiStatusMessage.startsWith("Connecting") || _apiStatusMessage.startsWith("API Error")) {
      apiStatusColor = Colors.orange.shade700;
    } else {
      apiStatusColor = Colors.red.shade700;
    }


    return Scaffold(
      appBar: AppBar(
        title: const Text('Smart Water SCADA (Flask)'),
        backgroundColor: Theme.of(context).colorScheme.primaryContainer,
        actions: [
          IconButton(
            icon: const Icon(Icons.show_chart),
            tooltip: 'View Trends',
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => TrendChartsPage(
                    waterLevelHistory: _waterLevelHistory,
                    pressureHistory: _pressureHistory,
                    flowRateHistory: _flowRateHistory,
                  ),
                ),
              );
            },
          ),
          // Settings Icon RE-ADDED to AppBar
          IconButton(
            icon: const Icon(Icons.settings),
            tooltip: 'Settings',
            onPressed: () async {
              final ipChanged = await Navigator.push<bool>(
                context,
                MaterialPageRoute(builder: (context) => const SettingsPage()),
              );
              // If IP might have changed, reload IP and force a reconnect attempt
              if (ipChanged == true && mounted) {
                print("Settings page indicated IP might have changed. Forcing reconnect by pull-to-refresh or next poll.");
                await _forceRefreshDataAndConnection();
              }
            },
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: _forceRefreshDataAndConnection,
        child: ListView(
          padding: const EdgeInsets.all(8.0),
          children: <Widget>[
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 8.0),
              child: Text(_apiStatusMessage, style: TextStyle(color: apiStatusColor, fontWeight: FontWeight.bold, fontSize: 16), textAlign: TextAlign.center,),
            ),
            if (_isLoading && !_apiStatusMessage.startsWith("Connected"))
              const Padding(
                padding: EdgeInsets.all(8.0),
                child: Center(child: CircularProgressIndicator()),
              ),
            _buildRadialGauge(
              "Tank Water Level",
              waterLevel,
              "%",
              100.0,
              <GaugeRange>[
                GaugeRange(startValue: 0, endValue: 33, color: Colors.red.shade300, startWidth: 10, endWidth: 10),
                GaugeRange(startValue: 33, endValue: 66, color: Colors.orange.shade300, startWidth: 10, endWidth: 10),
                GaugeRange(startValue: 66, endValue: 100, color: Colors.green.shade300, startWidth: 10, endWidth: 10),
              ],
            ),
            const SizedBox(height: 10),
            _buildRadialGauge(
              "Pressure",
              pressure,
              "PSI",
              maxPressureForGauge,
              <GaugeRange>[
                GaugeRange(startValue: 0, endValue: maxPressureForGauge * 0.33, color: Colors.blue.shade200, startWidth: 10, endWidth: 10),
                GaugeRange(startValue: maxPressureForGauge * 0.33, endValue: maxPressureForGauge * 0.66, color: Colors.blue.shade400, startWidth: 10, endWidth: 10),
                GaugeRange(startValue: maxPressureForGauge * 0.66, endValue: maxPressureForGauge, color: Colors.blue.shade700, startWidth: 10, endWidth: 10),
              ],
            ),
            const SizedBox(height: 10),
            _buildRadialGauge(
              "Flow Rate",
              flowRate,
              "LPM",
              maxFlowRateForGauge,
              <GaugeRange>[
                GaugeRange(startValue: 0, endValue: maxFlowRateForGauge * 0.25, color: Colors.teal.shade200, startWidth: 10, endWidth: 10),
                GaugeRange(startValue: maxFlowRateForGauge * 0.25, endValue: maxFlowRateForGauge * 0.75, color: Colors.teal.shade400, startWidth: 10, endWidth: 10),
                GaugeRange(startValue: maxFlowRateForGauge * 0.75, endValue: maxFlowRateForGauge, color: Colors.teal.shade700, startWidth: 10, endWidth: 10),
              ],
            ),
            const SizedBox(height: 10),
            _buildIconStatusCard('Pump 1', pump1Status, Icons.power_settings_new, Icons.power_off_outlined),
            _buildIconStatusCard('Solenoid Valve 1', valve1Status, Icons.adjust, Icons.circle_outlined),

            Card(
              elevation: 2,
              margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal:16.0, vertical: 8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>[
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text("Pump 2 / Valve 2", style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
                        Text(
                          pump2Status ? "ON" : "OFF",
                          style: TextStyle(
                              fontSize: 14,
                              color: pump2Status ? Colors.green.shade700 : Colors.red.shade700,
                              fontWeight: FontWeight.bold
                          ),
                        ),
                      ],
                    ),
                    Switch(
                      value: isPump2OnUserIntent,
                      onChanged: _togglePump2AndValve2,
                      activeColor: Colors.green.shade600,
                      inactiveThumbColor: Colors.red.shade400,
                    ),
                  ],
                ),
              ),
            ),
            _buildAlarmCard(),
          ],
        ),
      ),
    );
  }
}
